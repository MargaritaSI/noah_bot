import os
import logging
from datetime import date, datetime
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, URLInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from config import BOT_TOKEN, ADMIN_ID, DEFAULT_PROPERTIES, MENU_IMAGES, DELIVERY_URL, WELCOME_IMAGE, SPECIAL_IMAGE
from keyboards import main_menu_kb, calendar_kb, people_kb, time_kb, confirm_kb, menu_kb
from states import BookingStates, SpecialBookingStates

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DEFAULT_PROPERTIES)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# ==========================
# –ö–æ–º–∞–Ω–¥—ã
# ==========================
@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()

    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω Noah! üçΩ\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start"
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo = URLInputFile(WELCOME_IMAGE)
        await message.answer_photo(photo=photo, caption=text, reply_markup=main_menu_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer(text, reply_markup=main_menu_kb)


@dp.message(Command("info"))
async def info(message: Message):
    text = (
        "<b>üìç –ù–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        "<b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b>\n"
        "–ü–Ω ‚Äì –≤—ã—Ö–æ–¥–Ω–æ–π \n"
        "–í—Ç‚Äì–ß—Ç: 17:00‚Äì22:00\n"
        "–ü—Ç‚Äì–°–±: 12:00‚Äì24:00\n"
        "–í—Å: 14:00‚Äì21:00\n\n"
        "<b>–ê–¥—Ä–µ—Å:</b> Rodenrijsstraat 150, 1062 JA Amsterdam\n"
        "<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> 020 896 0586\n"
        "<b>–ü–æ—á—Ç–∞:</b> info@noah.restaurant\n\n"
        "<b>–ú—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö:</b>\n"
        "<a href='https://www.instagram.com/restaurantnoahlieven/'>Instagram</a> | <a href='https://www.facebook.com/profile.php?id=100088519935223'>Facebook</a>"
    )
    await message.answer(text, reply_markup=main_menu_kb)


@dp.message(Command("menu"))
async def menu_command(message: Message):
    await message.answer("üçΩ <b>–ù–∞—à–µ –º–µ–Ω—é:</b>", reply_markup=menu_kb())


@dp.callback_query(F.data.startswith("menu:"))
async def menu_callback(callback: CallbackQuery):
    menu_type = callback.data.split(":")[1]

    try:
        captions = {
            "drinks": "üçπ <b>–ù–∞–ø–∏—Ç–∫–∏</b>",
            "food": "üçΩ <b>–ï–¥–∞</b>",
            "wine": "üç∑ <b>–í–∏–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞</b>"
        }

        images = MENU_IMAGES[menu_type]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
        photo = URLInputFile(images[0])
        await callback.message.answer_photo(
            photo=photo,
            caption=captions.get(menu_type, "–ú–µ–Ω—é")
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
        for img_url in images[1:]:
            photo = URLInputFile(img_url)
            await callback.message.answer_photo(photo=photo)

        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é {menu_type}: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", show_alert=True)


@dp.message(Command("delivery"))
async def delivery(message: Message):
    text = (
        "üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞</b>\n\n"
        "–ù–µ —É—Å–ø–µ–≤–∞–µ—Ç–µ –∑–∞–π—Ç–∏? –ú–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É:\n"
        "–º—ã –Ω–∞ <a href='https://www.ubereats.com/nl-en/store/noah-lieven/D_L7W1XOTfyuEyQqmyQJmQ?diningMode=DELIVERY&pl=JTdCJTIyYWRkcmVzcyUyMiUzQSUyMjNlJTIwS2VrZXJzdHJhYXQlMjIlMkMlMjJyZWZlcmVuY2UlMjIlM0ElMjJFaXN6WlNCTFpXdGxjbk4wY21GaGRDd2dNVEV3TkNCQmJYTjBaWEprWVcwc0lFNWxkR2hsY214aGJtUnpJaTRxTEFvVUNoSUo3WkdzT0c0TXhrY1JpWmcxWlZ2bVRFNFNGQW9TQ1ZWM21wUzFQOFpIRVkydndMZE1fUUJtJTIyJTJDJTIycmVmZXJlbmNlVHlwZSUyMiUzQSUyMmdvb2dsZV9wbGFjZXMlMjIlMkMlMjJsYXRpdHVkZSUyMiUzQTUyLjMxMzQyMyUyQyUyMmxvbmdpdHVkZSUyMiUzQTQuOTc5Mjg4JTdE'>Uber Eats</a> –∏ "
        "<a href='https://www.thuisbezorgd.nl/menu/noah-lieven#pre-order'>Thuisbezorgd</a>"
    )

    try:
        photo = URLInputFile(DELIVERY_URL)
        await message.answer_photo(photo=photo, caption=text, reply_markup=main_menu_kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
        await message.answer(text, reply_markup=main_menu_kb)


# ==========================
# –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞
# ==========================
@dp.message(Command("book"))
async def book_start(message: Message, state: FSMContext):
    await state.set_state(BookingStates.choosing_date)

    today = date.today()
    await message.answer(
        "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
        reply_markup=calendar_kb(today.year, today.month, offset=0)
    )


@dp.callback_query(F.data.startswith("cal_nav:"))
async def calendar_navigation(callback: CallbackQuery, state: FSMContext):
    offset = int(callback.data.split(":")[1])
    today = date.today()

    await callback.message.edit_reply_markup(
        reply_markup=calendar_kb(today.year, today.month, offset=offset)
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("date:"), BookingStates.choosing_date)
async def date_selected(callback: CallbackQuery, state: FSMContext):
    _, year, month, day = callback.data.split(":")
    selected_date = date(int(year), int(month), int(day))

    await state.update_data(date=selected_date)
    await state.set_state(BookingStates.choosing_people)

    await callback.message.edit_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: <b>{selected_date.strftime('%d.%m.%Y')}</b>\n\n"
        "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:</b>",
        reply_markup=people_kb()
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("people:"), BookingStates.choosing_people)
async def people_selected(callback: CallbackQuery, state: FSMContext):
    people_count = callback.data.split(":")[1]

    if people_count == "more":
        await callback.answer(
            "–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –±–æ–ª—å—à–µ 9 —á–µ–ª–æ–≤–µ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: 020 896 0586",
            show_alert=True
        )
        return

    data = await state.get_data()
    selected_date = data['date']

    await state.update_data(people=int(people_count))
    await state.set_state(BookingStates.choosing_time)

    await callback.message.edit_text(
        f"‚úÖ –î–∞—Ç–∞: <b>{selected_date.strftime('%d.%m.%Y')}</b>\n"
        f"‚úÖ –ì–æ—Å—Ç–µ–π: <b>{people_count}</b>\n\n"
        "üïê <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:</b>",
        reply_markup=time_kb(selected_date)
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("time:"), BookingStates.choosing_time)
async def time_selected(callback: CallbackQuery, state: FSMContext):
    hour = int(callback.data.split(":")[1])

    data = await state.get_data()
    selected_date = data['date']
    people = data['people']

    await state.update_data(time=hour)
    await state.set_state(BookingStates.confirming)

    await callback.message.edit_text(
        "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        f"üìÖ –î–∞—Ç–∞: <b>{selected_date.strftime('%d.%m.%Y')}</b>\n"
        f"üë• –ì–æ—Å—Ç–µ–π: <b>{people}</b>\n"
        f"üïê –í—Ä–µ–º—è: <b>{hour:02d}:00</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ª—é–±–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:",
        reply_markup=confirm_kb()
    )
    await callback.answer()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
@dp.callback_query(F.data.startswith("change:"))
async def change_parameter(callback: CallbackQuery, state: FSMContext):
    param = callback.data.split(":")[1]
    data = await state.get_data()

    if param == "date":
        await state.set_state(BookingStates.choosing_date)
        today = date.today()
        await callback.message.edit_text(
            "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:</b>",
            reply_markup=calendar_kb(today.year, today.month, offset=0)
        )
    elif param == "people":
        await state.set_state(BookingStates.choosing_people)
        await callback.message.edit_text(
            "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:</b>",
            reply_markup=people_kb()
        )
    elif param == "time":
        await state.set_state(BookingStates.choosing_time)
        selected_date = data['date']
        await callback.message.edit_text(
            "üïê <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:</b>",
            reply_markup=time_kb(selected_date)
        )

    await callback.answer()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
@dp.callback_query(F.data == "confirm:booking", BookingStates.confirming)
async def confirm_booking(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BookingStates.entering_name)
    await callback.message.edit_text(
        "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )
    await callback.answer()


@dp.message(BookingStates.entering_name)
async def enter_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(BookingStates.entering_email)
    await message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É:")


@dp.message(BookingStates.entering_email)
async def enter_email(message: Message, state: FSMContext):
    email = message.text

    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    if "@" not in email or "." not in email:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:")
        return

    await state.update_data(email=email)
    await state.set_state(BookingStates.entering_phone)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä +31...):")


@dp.message(BookingStates.entering_phone)
async def enter_phone(message: Message, state: FSMContext):
    phone = message.text

    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone.startswith("+") or len(phone) < 10:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +31...")
        return

    await state.update_data(phone=phone)
    await state.set_state(BookingStates.entering_telegram)

    # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_telegram = message.from_user.username

    if user_telegram:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å username
        await message.answer(
            f"üí¨ –í–∞—à Telegram: @{user_telegram}\n\n"
            "–¢–µ–ª–µ–≥—Ä–∞–º –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
            f"–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π '@{user_telegram}' –∏–ª–∏ –¥—Ä—É–≥–æ–π –≤ –ø–æ–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å Telegram –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':"
        )
    else:
        # –ï—Å–ª–∏ username –Ω–µ—Ç
        await message.answer(
            "üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram –Ω–∏–∫–Ω–µ–π–º –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username):\n\n"
            "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å Telegram."
        )


@dp.message(BookingStates.entering_telegram)
async def enter_telegram(message: Message, state: FSMContext):
    telegram_contact = message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å telegram
    if telegram_contact.lower() in ['–Ω–µ—Ç', 'no', '-']:
        telegram_contact = "–ù–µ —É–∫–∞–∑–∞–Ω"
    # –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –∑–∞–±—ã–ª–∏
    elif telegram_contact and not telegram_contact.startswith('@'):
        telegram_contact = f"@{telegram_contact}"

    await state.update_data(telegram=telegram_contact)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_message = (
        "‚úÖ <b>–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.</b>\n\n"
        f"üìÖ –î–∞—Ç–∞: {data['date'].strftime('%d.%m.%Y')}\n"
        f"üïê –í—Ä–µ–º—è: {data['time']:02d}:00\n"
        f"üë• –ì–æ—Å—Ç–µ–π: {data['people']}\n\n"
        "–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    await message.answer(user_message, reply_markup=main_menu_kb)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—É
    user_id = message.from_user.id
    user_username = message.from_user.username
    user_link = f"<a href='tg://user?id={user_id}'>–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>"

    telegram_display = data.get('telegram', '–ù–µ —É–∫–∞–∑–∞–Ω')
    if telegram_display != "–ù–µ —É–∫–∞–∑–∞–Ω" and telegram_display.startswith('@'):
        telegram_display = f"<a href='https://t.me/{telegram_display[1:]}'>{telegram_display}</a>"

    admin_message = (
        "üîî <b>–ù–û–í–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï!</b>\n\n"
        f"üìÖ –î–∞—Ç–∞: {data['date'].strftime('%d.%m.%Y')}\n"
        f"üïê –í—Ä–µ–º—è: {data['time']:02d}:00\n"
        f"üë• –ì–æ—Å—Ç–µ–π: {data['people']}\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üìß Email: {data['email']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üí¨ Telegram: {telegram_display}\n\n"
        f"üîó {user_link}\n"
        f"User ID: <code>{user_id}</code>"
    )
    if user_username:
        admin_message += f"\nUsername: @{user_username}"

    try:
        await bot.send_message(ADMIN_ID, admin_message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

    await state.clear()


# ==========================
# –û—Å–æ–±–µ–Ω–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
# ==========================
@dp.message(Command("special_booking"))
async def special_booking_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(SpecialBookingStates.entering_name)

    text = (
        "üéâ <b>–û—Å–æ–±–µ–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?</b>\n\n"
        "–î–ª—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–∂–∏–Ω–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )

    try:
        photo = URLInputFile(SPECIAL_IMAGE)
        await message.answer_photo(photo=photo, caption=text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer(text)


@dp.message(SpecialBookingStates.entering_name)
async def special_enter_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(SpecialBookingStates.entering_email)
    await message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É:")


@dp.message(SpecialBookingStates.entering_email)
async def special_enter_email(message: Message, state: FSMContext):
    email = message.text

    if "@" not in email or "." not in email:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:")
        return

    await state.update_data(email=email)
    await state.set_state(SpecialBookingStates.entering_phone)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä +31...):")


@dp.message(SpecialBookingStates.entering_phone)
async def special_enter_phone(message: Message, state: FSMContext):
    phone = message.text

    if not phone.startswith("+") or len(phone) < 10:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +31...")
        return

    await state.update_data(phone=phone)
    await state.set_state(SpecialBookingStates.entering_guests)
    await message.answer("üë• –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:")


@dp.message(SpecialBookingStates.entering_guests)
async def special_enter_guests(message: Message, state: FSMContext):
    await state.update_data(guests=message.text)
    await state.set_state(SpecialBookingStates.entering_info)
    await message.answer("üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (–¥–∞—Ç–∞, –≤—Ä–µ–º—è, –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è):")


@dp.message(SpecialBookingStates.entering_info)
async def special_enter_info(message: Message, state: FSMContext):
    await state.update_data(info=message.text)

    data = await state.get_data()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_message = (
        "‚úÖ <b>–°–ø–∞—Å–∏–±–æ! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.</b>\n\n"
        "–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
    )
    await message.answer(user_message, reply_markup=main_menu_kb)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    admin_message = (
        "üéâ <b>–ó–ê–ü–†–û–° –ù–ê –û–°–û–ë–ï–ù–ù–û–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï!</b>\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üìß Email: {data['email']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üë• –ì–æ—Å—Ç–µ–π: {data['guests']}\n\n"
        f"üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{data['info']}\n\n"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}"
    )

    try:
        await bot.send_message(ADMIN_ID, admin_message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

    await state.clear()


# –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –ø–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –∫–Ω–æ–ø–∫–∞–º
@dp.callback_query(F.data == "ignore")
async def ignore_callback(callback: CallbackQuery):
    await callback.answer()


# ==========================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ==========================
if __name__ == "__main__":
    import asyncio


    async def main():
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        await dp.start_polling(bot)


    asyncio.run(main())