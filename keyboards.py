from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import date, timedelta

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/info"), KeyboardButton(text="/book")],
        [KeyboardButton(text="/menu"), KeyboardButton(text="/delivery")],
        [KeyboardButton(text="/special_booking")]
    ],
    resize_keyboard=True
)


# –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
def calendar_kb(year: int, month: int, offset: int = 0):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –º–µ—Å—è—Ü —Å —É—á–µ—Ç–æ–º offset"""
    buttons = []

    # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π –º–µ—Å—è—Ü
    first_day = date(year, month, 1)
    target_date = first_day + timedelta(days=30 * offset)
    target_year = target_date.year
    target_month = target_date.month

    # –î–û–ë–ê–í–ò–¢–¨: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
    month_names = [
        "", "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ]
    month_year_text = f"{month_names[target_month]} {target_year}"

    # –î–û–ë–ê–í–ò–¢–¨: –°—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞
    buttons.append([InlineKeyboardButton(text=month_year_text, callback_data="ignore")])

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    buttons.append([InlineKeyboardButton(text=w, callback_data="ignore") for w in weekdays])

    # –ü–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    first = date(target_year, target_month, 1)
    if target_month == 12:
        last = date(target_year + 1, 1, 1) - timedelta(days=1)
    else:
        last = date(target_year, target_month + 1, 1) - timedelta(days=1)

    # –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    empty_days = first.weekday()
    current_row = [InlineKeyboardButton(text=" ", callback_data="ignore") for _ in range(empty_days)]

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    for day in range(1, last.day + 1):
        current = date(target_year, target_month, day)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞—Ç—ã
        is_disabled = (
                current.weekday() == 0 or  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∏
                (current.month == 12 and current.day in [30, 31]) or  # 30-31 –¥–µ–∫–∞–±—Ä—è
                current < date.today()  # –ü—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã
        )

        if is_disabled:
            btn = InlineKeyboardButton(text=f"‚ùå{day}", callback_data="ignore")
        else:
            btn = InlineKeyboardButton(
                text=str(day),
                callback_data=f"date:{target_year}:{target_month}:{day}"
            )

        current_row.append(btn)

        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
        if len(current_row) == 7:
            buttons.append(current_row)
            current_row = []

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
    if current_row:
        while len(current_row) < 7:
            current_row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
        buttons.append(current_row)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if offset < 3:
        if offset == 0:
            nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü ‚ñ∂Ô∏è", callback_data=f"cal_nav:{offset + 1}"))
        elif offset == 1:
            nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –¢–µ–∫—É—â–∏–π", callback_data=f"cal_nav:{offset - 1}"))
            nav_buttons.append(InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü ‚ñ∂Ô∏è", callback_data=f"cal_nav:{offset + 1}"))
        else:
            nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cal_nav:{offset - 1}"))
            if offset < 3:
                nav_buttons.append(InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚ñ∂Ô∏è", callback_data=f"cal_nav:{offset + 1}"))
    else:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cal_nav:{offset - 1}"))

    if nav_buttons:
        buttons.append(nav_buttons)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª—é–¥–µ–π
def people_kb():
    buttons = []
    row = []
    for i in range(1, 10):
        row.append(InlineKeyboardButton(text=str(i), callback_data=f"people:{i}"))
        if i % 3 == 0:
            buttons.append(row)
            row = []

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –≥—Ä—É–ø–ø
    buttons.append([InlineKeyboardButton(text="–ë–æ–ª—å—à–µ 9 —á–µ–ª–æ–≤–µ–∫?", callback_data="people:more")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –í—Ä–µ–º—è —Å–ª–æ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
def time_kb(selected_date: date):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    –í—Ç‚Äì–ß—Ç: 17:00‚Äì22:00
    –ü—Ç‚Äì–°–±: 12:00‚Äì24:00
    –í—Å: 14:00‚Äì21:00
    """
    weekday = selected_date.weekday()
    buttons = []

    if weekday in [1, 2, 3]:  # –í—Ç-–ß—Ç
        hours = range(17, 23)  # 17:00-22:00
    elif weekday in [4, 5]:  # –ü—Ç-–°–±
        hours = range(12, 25)  # 12:00-24:00
    elif weekday == 6:  # –í—Å
        hours = range(14, 22)  # 14:00-21:00
    else:
        hours = []  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å —Å—é–¥–∞

    row = []
    for hour in hours:
        time_str = f"{hour:02d}:00"
        row.append(InlineKeyboardButton(text=time_str, callback_data=f"time:{hour}"))
        if len(row) == 4:
            buttons.append(row)
            row = []

    if row:
        buttons.append(row)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
def confirm_kb():
    buttons = [
        [
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data="change:date"),
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª—é–¥–µ–π", callback_data="change:people"),
        ],
        [
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="change:time"),
        ],
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm:booking")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ú–µ–Ω—é (–Ω–∞–ø–∏—Ç–∫–∏, –µ–¥–∞, –≤–∏–Ω–æ)
def menu_kb():
    buttons = [
        [InlineKeyboardButton(text="üçπ –ù–∞–ø–∏—Ç–∫–∏", callback_data="menu:drinks")],
        [InlineKeyboardButton(text="üçΩ –ï–¥–∞", callback_data="menu:food")],
        [InlineKeyboardButton(text="üç∑ –í–∏–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞", callback_data="menu:wine")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –í—ã–±–æ—Ä –ø–æ–ª–∞
def gender_kb():
    buttons = [
        [
            InlineKeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender:male"),
            InlineKeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender:female")
        ],
        [InlineKeyboardButton(text="üßë –î—Ä—É–≥–æ–µ", callback_data="gender:other")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)